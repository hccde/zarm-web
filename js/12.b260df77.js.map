{"version":3,"sources":["webpack:///./components/checkbox/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/12.b260df77.js","sourcesContent":["export default \"# Checkbox 多选框\\n拥有开/关状态的基础组件，常用于条目多选场景。\\n\\n\\n\\n## 基础用法\\n单独使用，表示在两种状态之间切换。\\n\\n```jsx\\nimport { Checkbox } from 'zarm-web';\\n\\nReactDOM.render(\\n  <Checkbox onChange={(e) => console.log(e)}>选择</Checkbox>\\n, mountNode);\\n```\\n\\n\\n## 组合使用\\n一组可选项中进行多项选择。\\n\\n```jsx\\nimport { Checkbox } from 'zarm-web';\\n\\nclass Demo extends React.Component {\\n  state = {\\n    checkboxValue: []\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <div style={{marginBottom: 8}}>选择了：{this.state.checkboxValue.join(',')}</div>\\n        <Checkbox.Group\\n          value={this.state.checkboxValue}\\n          onChange={(values) => {\\n            console.log(values)\\n            this.setState({\\n              checkboxValue: values\\n            });\\n          }}\\n        >\\n          <Checkbox value=\\\"a\\\" onChange={value => console.log(value)}>A</Checkbox>\\n          <Checkbox value=\\\"b\\\">B</Checkbox>\\n          <Checkbox value=\\\"c\\\">C</Checkbox>\\n          <Checkbox value=\\\"d\\\">D</Checkbox>\\n        </Checkbox.Group>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## 禁用状态\\n不可勾选状态。\\n\\n```jsx\\nimport { Checkbox } from 'zarm-web';\\n\\nReactDOM.render(\\n  <>\\n    <Checkbox\\n      disabled\\n      onChange={(e) => console.log(e)}\\n    >\\n      选择\\n    </Checkbox>\\n    <Checkbox\\n      disabled\\n      checked\\n      onChange={(e) => console.log(e)}\\n    >\\n      选择\\n    </Checkbox>\\n  </>\\n, mountNode);\\n```\\n\\n\\n\\n## 部分选中状态\\n未全部选中，即部分选中状态。\\n可以使用`indeterminate`属性来定义样式是否为部分选中。\\n\\n```jsx\\nimport { Checkbox } from 'zarm-web';\\n\\nconst plainOptions = ['a', 'b', 'c', 'd'];\\n\\nclass Demo extends React.Component {\\n  state = {\\n    checkboxValue: ['a','c'],\\n    indeterminate: true,\\n    checkAll: false,\\n  }\\n\\n  onCheckAllChange = e => {\\n    this.setState({\\n      checkboxValue: e.target.checked ? JSON.parse(JSON.stringify(plainOptions)) : [],\\n      indeterminate: false,\\n      checkAll: e.target.checked,\\n    });\\n  };\\n\\n  onChange = checkboxValue => {\\n    this.setState({\\n      checkboxValue,\\n      indeterminate: !!checkboxValue.length && checkboxValue.length < plainOptions.length,\\n      checkAll: checkboxValue.length === plainOptions.length,\\n    });\\n  };\\n \\n  render() {\\n    return (\\n      <>\\n        <div style={{marginBottom: 8}}>\\n          <Checkbox\\n            indeterminate={this.state.indeterminate}\\n            onChange={this.onCheckAllChange}\\n            checked={this.state.checkAll}\\n          >\\n            全选\\n          </Checkbox>\\n        </div>\\n\\n        <Checkbox.Group\\n          value={this.state.checkboxValue}\\n          onChange={this.onChange}\\n        >\\n          <Checkbox value=\\\"a\\\">A</Checkbox>\\n          <Checkbox value=\\\"b\\\">B</Checkbox>\\n          <Checkbox value=\\\"c\\\">C</Checkbox>\\n          <Checkbox value=\\\"d\\\">D</Checkbox>\\n        </Checkbox.Group>\\n      </>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n## API\\n\\nCheckbox \\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| checked | boolean | false | 是否选中 |\\n| defaultChecked | boolean | false | 默认选中 |\\n| disabled | boolean | false | 是否禁用 |\\n| value | string \\\\| number | - | - | 选择框对应的值 |\\n| indeterminate | boolean | false | 是否是部分选中状态 |\\n| id | string | - | 方便外部带有 for 属性的 label 标签控制当前 checkbox |\\n| onChange | React.ChangeEventHandler&lt;HTMLInputElement&gt; | - | 勾选状态变化触发的事件 |\\n\\nCheckbox.Group \\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| value | string[] \\\\| number[] | [] | 选中的值 | \\n| defaultValue | string[] \\\\| number[] | [] | 默认选中的值 |    \\n| disabled | boolean | false | 整组禁用 | \\n| onChange | (values: string[] \\\\| number[]) => void | - | 勾选状态变化触发的事件 | \\n\\n\\n\""],"sourceRoot":""}