{"version":3,"sources":["webpack:///./components/dropdown/dropdown.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/15.cbcfa8b4.js","sourcesContent":["export default \"## Dropdown 下拉框\\n下拉框组件。\\n\\n### 基础用法\\n目前支持三种触发方式 `click hover contextMenus`,默认值为`click`。\\n:::demo 通过`visible`属性控制显隐。\\n```js\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      dropdown: false,\\n      dropdown2:false,\\n      dropdown3:false,\\n      dropdown4:false\\n    }\\n  }\\n\\n  render() {\\n    const overlay = <Menu>\\n                <Menu.Item><Checkbox value=\\\"name\\\">姓名</Checkbox></Menu.Item>\\n                <Menu.Item><Checkbox value=\\\"age\\\">年龄</Checkbox></Menu.Item>\\n                <Menu.Item onClick={()=>{\\n                  this.setState({\\n                    dropdown: false,\\n                    dropdown2:false,\\n                    dropdown3:false,\\n                    dropdown4:false\\n                  });\\n                }}>点我关闭弹窗</Menu.Item>\\n              </Menu>;\\n\\n    return (\\n      <div style={{position: 'relative'}}>\\n        <Dropdown\\n          visible={this.state.dropdown}\\n          onVisibleChange={visible => {\\n            this.setState({\\n              dropdown: visible\\n            });\\n          }}\\n          overlay={overlay}\\n          >\\n            <Button theme=\\\"primary\\\">\\n              toggle\\n            </Button>\\n        </Dropdown>\\n\\n\\n        <Dropdown\\n          disabled\\n          visible={this.state.dropdown2}\\n          style={{position: 'absolute', left: 0, top: 36, minWidth: 200}}\\n          onVisibleChange={visible => {\\n            this.setState({\\n              dropdown2: visible\\n            });\\n          }}\\n          overlay={overlay}\\n          >\\n            <Button disabled theme=\\\"primary\\\">\\n              disabled\\n            </Button>\\n        </Dropdown>\\n\\n\\n        <Dropdown\\n          trigger=\\\"hover\\\"\\n          visible={this.state.dropdown3}\\n          style={{position: 'absolute', left: 0, top: 36, minWidth: 200}}\\n          onVisibleChange={visible => {\\n            this.setState({\\n              dropdown3: visible\\n            });\\n          }}\\n          overlay={overlay}\\n          >\\n            <Button theme=\\\"primary\\\">\\n              hover me\\n            </Button>\\n        </Dropdown>\\n\\n        <Dropdown\\n          trigger=\\\"contextMenu\\\"\\n          visible={this.state.dropdown4}\\n          style={{position: 'absolute', left: 0, top: 36, minWidth: 200}}\\n          onVisibleChange={visible => {\\n            this.setState({\\n              dropdown4: visible\\n            });\\n          }}\\n          overlay={overlay}\\n          >\\n            <Button theme=\\\"primary\\\">\\n              right click me\\n            </Button>\\n        </Dropdown>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 弹窗的定位\\n定位信息有6种 `bottomLeft, bottomCenter, bottomRight, topLeft, topCenter, topRight`。通过`placement`控制显示位置\\n:::demo 通过`placement`属性控制弹窗的位置。\\n```js\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      dropdown: false,\\n      dropdown2:false,\\n    }\\n  }\\n  render() {\\n    const overlay = <Menu>\\n                <Menu.Item><Checkbox value=\\\"name\\\">姓名</Checkbox></Menu.Item>\\n                <Menu.Item><Checkbox value=\\\"age\\\">年龄</Checkbox></Menu.Item>\\n                <Menu.Item onClick={()=>{\\n                  this.setState({\\n                    dropdown: false,\\n                    dropdown2:false,\\n                  });\\n                }}>点我关闭当前弹窗</Menu.Item>\\n              </Menu>;\\n\\n    return (\\n      <div style={{position: 'relative'}}>\\n        <Dropdown\\n          visible={this.state.dropdown}\\n          style={{position: 'absolute', left: 0, top: 36, minWidth: 200}}\\n          onVisibleChange={visible => {\\n            this.setState({\\n              dropdown: visible\\n            });\\n          }}\\n          overlay={overlay}\\n          >\\n            <Button theme=\\\"primary\\\">\\n              点我从下面弹出\\n            </Button>\\n        </Dropdown>\\n\\n        <Dropdown\\n          placement=\\\"topLeft\\\"\\n          visible={this.state.dropdown2}\\n          style={{position: 'absolute', left: 0, top: 36, minWidth: 200}}\\n          onVisibleChange={visible => {\\n            this.setState({\\n              dropdown2: visible\\n            });\\n          }}\\n          overlay={overlay}\\n          >\\n            <Button theme=\\\"primary\\\">\\n              点我从上面弹出\\n            </Button>\\n        </Dropdown>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n\\n### `onVisibleChange` 参数\\n这个参数为当显示属性发生变化的回调函数 为必传项，一般情况下, 我们都需要保持外部数据和内部数据的一致性。参考下面用法\\n```\\nonVisibleChange={(visible)=>{\\n      this.setState({\\n        dropdownVisible: visible\\n      })\\n  }\\n}\\n```\\n\\n### 静态方法\\n```\\nDrop.hide();         // 隐藏所有的Dropdown组件\\nDrop.show();         // 显示所有的Dropdown组件(不包括禁用的组件)\\nDrop.reposition();   // 重新定位所有的组件(不包括隐藏和禁用的组件)\\n```\\n\\n\\n### `notRenderInDisabledMode` 参数\\n当这个参数为true 且 disable参数也为true的时候，将不会渲染弹窗，这会在一些一直都是disabled状态下的组件节省渲染开销，尤其在渲染大量数据的情况下。\\n\\n### `className` 和 `style`参数\\nclassName 和 style 参数会作用在弹出框的最外层 ui-dropdown节点上。内部的style会覆盖传入的style(若冲突), 会被覆盖的属性有：\\n```\\ndisplay                  // 控制dropdown的显示\\nleft                     // 控制dropdown的位置\\ntop                      // 控制dropdown的位置\\nanimationDuration        // 控制dropdown动画的事件 默认为300\\nzIndex                   // 控制组件的显示层级 默认为9999\\nposition                 // 控制组件的定位方式，只能为absolute\\n```\\n\\n### 内部实现\\n设 点击的触发组件为 triggerBox, 弹出的组件为 DropdownBox\\n+ Dropdown组件在实现的时候，考虑到定位信息的获取，把所有的DropdownBox都动态创建到body的根节点下。然后相对于body进行绝对定位。计算出当前triggerBox的位置然后设置弹出框的绝对定位信息， 若父级中有position:fixed样式，则动态创建到该元素下。\\n+ 监听了window.resize事件，当window.resize的时候自动计算目前已弹出的DropdownBox的位置。  \\n+ 监听了document的点击事件，当点击外部的时候回自动隐藏DropdownBox。  \\n+ 默认在triggerBox和DropdownBox之间有5px的间隙。  \\n+ 当trigger参数为hover的时候，鼠标移出之后会延迟300ms后，DropdownBox才会消失，为了让用户在从triggerBox滑到DropdownBox的时候，经过间隙不会直接隐藏DropdownBox。  \\n+ DropdownBox的动画效果时长为300ms，目前不支持自定义。  \\n+ 当前的弹出框的最小宽度为当前triggerBox的宽度。可以自己设置宽度。\\n\\n\\n### Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| visible   |  是否显示         | boolean |  -     |    false    |\\n| radius    |  是否圆角         | boolean |  -     |    false    |\\n| prefixCls |  组件的className  | string | -      | ui-dropdown|\\n| overlay   |  组件弹出层的内容  | ReactElement | -  |-|\\n| placement |  组件对齐的方式    | string | bottomLeft, bottomCenter, bottomRight, topLeft, topCenter, topRight| bottomLeft |\\n| className |  弹出层的className | string | - | - |\\n| style |  弹出层的style | React.CSSProperties | - | - |\\n| trigger | 出发弹出框的方式 | string | click hover contextMenu | click |\\n| disabled | 是否禁用弹出框 | boolean | - | false |\\n| zIndex | 当前弹框的zIndex值 | number | - | 9999 |\\n| notRenderInDisabledMode | 在disable为true的时候是否不渲染overlay | boolean | - | false |\\n| onVisibleChange | 显示属性变化时候的回调函数（必传）| (visible:boolean):=> void | - | - |\\n| getPopupContainer | 获取dropdown挂载点的函数（必传）| ():=> HTMLElement | - | - |\\n\""],"sourceRoot":""}