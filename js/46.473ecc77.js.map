{"version":3,"sources":["webpack:///./components/transition/transition.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/46.473ecc77.js","sourcesContent":["export default \"## Transition 过渡\\n\\n### 内置动画\\n\\n内置动画类型。\\n\\n:::demo visible控制显示隐藏 name为动画名称。\\n\\n```js\\n  constructor (props) {\\n    super(props);\\n    \\n    this.state = {\\n      visible: true,\\n      name: 'fade',\\n      directional: true\\n    }\\n  }\\n  render() {\\n    const { visible, name, directional } = this.state\\n    return (\\n      <div>\\n        <Row>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'fade' }) }}>fade</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'zoom' }) }}>zoom</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'door' }) }}>door</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'flip' }) }}>flip</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'moveUp' }) }}>moveUp</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'moveDown' }) }}>moveDown</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'moveLeft' }) }}>moveLeft</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'moveRight' }) }}>moveRight</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'rotate' }) }}>rotate</Button>\\n        </Row>\\n        <Row>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'scaleDown' }) }}>scaleDown</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'scaleUp' }) }}>scaleUp</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'slideUp' }) }}>slideUp</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'slideDown' }) }}>slideDown</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'slideLeft' }) }}>slideLeft</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'slideRight' }) }}>slideRight</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible, name: 'bounces' }) }}>bounce</Button>\\n        </Row>\\n        \\n        <Transition \\n          name={name}\\n          // transitionOnMount\\n          visible={this.state.visible} \\n        >\\n          <div style={{ position: 'relative', opacity: .6, background: '#ed1287', width: 200, height: 200, margin: '30px 0', zIndex: 20000 }}>\\n          </div>\\n        </Transition>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 静态动画\\n\\n静态动画。\\n\\n:::demo Button 组件提供5种主题，由`theme`属性来定义，默认为`default`。\\n\\n```js\\n  constructor (props) {\\n    super(props);\\n    \\n    this.state = {\\n      visible: true,\\n      name: 'fade',\\n      directional: true\\n    }\\n  }\\n  render() {\\n    const { visible, name, directional } = this.state\\n    return (\\n      <div>\\n        <Row>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ name: 'flash' }) }}>flash</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ name: 'shake' }) }}>shake</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ name: 'tada' }) }}>tada</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ name: 'pulse' }) }}>pulse</Button>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ name: 'swing' }) }}>swing</Button>\\n        </Row>\\n       \\n        <Transition \\n          name={name}\\n          directional={false}\\n          visible={this.state.visible} \\n        >\\n          <div \\n            style={{ \\n              position: 'relative', \\n              background: '#00BC70', \\n              width: 200, \\n              height: 200, \\n              margin: '30px 0', \\n              zIndex: 20000,\\n              opacity: .6\\n            }} \\n          />\\n        </Transition>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 动画函数勾子\\n\\n函数回调。\\n\\n:::demo onShow onStart onComplete onHide\\n\\n```js\\n  constructor (props) {\\n    super(props);\\n    \\n    this.state = {\\n      visible: true,\\n      name: 'bounce',\\n    }\\n  }\\n  onStart (data) {\\n    console.log(data)\\n    alert('animation onStart')\\n  }\\n  onComplete () {\\n    alert('animation onComplete')\\n  }\\n  onShow () {\\n    alert('animation onShow')\\n  }\\n  onHide () {\\n    alert('animation onHide')\\n  }\\n  onBeforeShow () {\\n    alert('animation onBeforeShow')\\n  }\\n  onBeforeHide () {\\n    alert('animation onBeforeHide')\\n  }\\n  render() {\\n    const { visible } = this.state\\n    return (\\n      <div>\\n        <Row>\\n          <Button type=\\\"primary\\\" onClick={() => { this.setState({ visible: !visible }) }}>flash</Button>\\n        </Row>\\n       \\n        <Transition \\n          name=\\\"bounces\\\"\\n          visible={this.state.visible} \\n          onStart={this.onStart.bind(this)} \\n          onComplete={this.onComplete.bind(this)}\\n          onShow={this.onShow.bind(this)}\\n          onHide={this.onHide.bind(this)}\\n          onBeforeShow={this.onBeforeShow.bind(this)}\\n          onBeforeHide={this.onBeforeHide.bind(this)}\\n        >\\n          <div \\n            style={{ \\n              position: 'relative', \\n              background: '#EC9131', \\n              width: 200, \\n              height: 200, \\n              margin: '30px 0', \\n              zIndex: 20000,\\n              opacity: .6\\n            }} \\n          />\\n        </Transition>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### Collapse Transition\\n\\n元素开闭动画过渡\\n\\n:::demo\\n\\n```js\\n  constructor (props) {\\n    super(props);\\n    \\n    this.state = {\\n      visible: true,\\n    }\\n  }\\n\\n  render() {\\n    const { visible } = this.state\\n    return (\\n      <div>\\n        <CollapseTransition \\n          visible={this.state.visible} \\n        >\\n          <div \\n            style={{ \\n              position: 'relative', \\n              background: '#ad65ec', \\n              width: 200, \\n              height: 200, \\n              margin: '30px 0', \\n              zIndex: 20000,\\n              opacity: .6\\n            }} \\n          />\\n        </CollapseTransition>\\n        <Button theme=\\\"primary\\\" onClick={() => this.setState({ visible: !this.state.visible })}>open</Button>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### Transition Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| visible    | 是否显示/隐藏   | boolean  |   -          |    —     |\\n| name       | 动画名称   | string    |  内置动画类型参考上面  |     fade   |\\n| duration   | 动画持续时间   | number    | — | 500   |\\n| directional| 是否是静态动画 fasle代表静态动画   | boolean    | — | true   |\\n| transitionOnMount     | 是否在节点挂载时动画   | boolean    | — | false   |\\n| unmountOnHide  | 节点隐藏时候是否删除节点    | -   | -  |  false  |\\n| mountOnShow  | 初始化的时候是否挂载节点    | boolean   | -  | true   |\\n\\n### Transition Events\\n| 事件名称 | 说明 | 回调参数 |\\n|---------- |-------- |---------- |\\n| onStart | 动画开始时候调用        | ({  ...props, status })   |\\n| onComplete | 动画结束后调用  | ({  ...props, status }) |\\n| onShow | 动画完成之后 显示时候调用 | ({  ...props, status }) |\\n| onHide | 动画完成之后 隐藏时候调用 | ({  ...props, status }) |\\n| onBeforeShow | 显示前调用 | ({  ...props, status }) |\\n| onBeforeHide | 隐藏之前调用 | ({  ...props, status }) |\\n\\n### CollapseTransition Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| visible    | 是否显示/隐藏   | boolean  |   -          |    —     |\\n\""],"sourceRoot":""}