{"version":3,"sources":["webpack:///./components/tree/tree.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/47.0226b0d7.js","sourcesContent":["export default \"## Tree\\n树形组件\\n\\n### 基础用法1\\n可默认展开全部，设置treeData props方式展示节点\\n\\n:::demo\\n\\n```js\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      treeData: [\\n                  {\\n                    keys: '0',\\n                    title: '根结点1',\\n                    children:\\n                      [\\n                        {\\n                          keys: '0-0',\\n                          title: '父结点 0-0',\\n                          children:\\n                            [\\n                              {\\n                                keys: '0-0-0',\\n                                title: '父结点 0-0-0',\\n                                children:\\n                                  [\\n                                    { keys: '0-0-0-0', title: '子结点 0-0-0-0' },\\n                                    { keys: '0-0-0-1', title: '子结点 0-0-0-1' },\\n                                  ],\\n                              },\\n                            ],\\n                        },\\n                        {\\n                          keys: '0-1',\\n                          title: '父结点 0-1',\\n                          children:\\n                            [\\n                              { keys: '0-1-0', title: '子结点 0-1-0'},\\n                              { keys: '0-1-1', title: '子结点 0-1-1' },\\n                              { keys: '0-1-2', title: '子结点 0-1-2' },\\n                            ],\\n                        },\\n                        {\\n                          keys: '0-2',\\n                          title: '父结点 0-2',\\n                          children:\\n                            [\\n                              { keys: '0-2-0', title: '父结点 0-2-0' },\\n                              {\\n                                keys: '0-2-1',\\n                                title: '父结点 0-2-1',\\n                                children:\\n                                  [\\n                                    {\\n                                      keys: '0-2-1-0',\\n                                      title: '子结点 0-2-1-0',\\n                                      children:\\n                                        [\\n                                          { keys: '0-2-1-0-0', title: '子结点 0-2-1-0-0' },\\n                                          { keys: '0-2-1-0-1', title: '子结点 0-2-1-0-1' },\\n                                        ],\\n                                    },\\n                                    { keys: '0-2-1-1', title: '子结点 0-2-1-1' },\\n                                  ],\\n                              },\\n                              { keys: '0-2-2', title: '子结点 0-2-2' },\\n                            ],\\n                        },\\n                      ],\\n                  },\\n                ]\\n    };\\n  }\\n  render() {\\n    const { treeData } = this.state;\\n    return (\\n      <div>\\n        <Tree treeData={treeData} defaultExpandAll />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 基础用法2\\n可选中，可设置默认展开节点, 可禁用子节点的选中状态\\n\\n:::demo\\n\\n```js\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      expandedKeys: ['0-0-0'],\\n      checkedKeys: ['0-0-0'],\\n      treeData: [\\n                  {\\n                    keys: '0',\\n                    title: '根结点1',\\n                    children:\\n                      [\\n                        {\\n                          keys: '0-0',\\n                          title: '父结点 0-0',\\n                          children:\\n                            [\\n                              {\\n                                keys: '0-0-0',\\n                                title: '父结点 0-0-0',\\n                                children:\\n                                  [\\n                                    { keys: '0-0-0-0', title: '子结点 0-0-0-0', checkDisabled: true },\\n                                    { keys: '0-0-0-1', title: '子结点 0-0-0-1' },\\n                                  ],\\n                              },\\n                            ],\\n                        },\\n                        {\\n                          keys: '0-1',\\n                          title: '父结点 0-1',\\n                          children:\\n                            [\\n                              { keys: '0-1-0', title: '子结点 0-1-0', checkDisabled: true },\\n                              { keys: '0-1-1', title: '子结点 0-1-1' },\\n                              { keys: '0-1-2', title: '子结点 0-1-2' },\\n                            ],\\n                        },\\n                        {\\n                          keys: '0-2',\\n                          title: '父结点 0-2',\\n                          children:\\n                            [\\n                              { keys: '0-2-0', title: '父结点 0-2-0' },\\n                              {\\n                                keys: '0-2-1',\\n                                title: '父结点 0-2-1',\\n                                children:\\n                                  [\\n                                    {\\n                                      keys: '0-2-1-0',\\n                                      title: '子结点 0-2-1-0',\\n                                      children:\\n                                        [\\n                                          { keys: '0-2-1-0-0', title: '子结点 0-2-1-0-0' },\\n                                          { keys: '0-2-1-0-1', title: '子结点 0-2-1-0-1' },\\n                                        ],\\n                                    },\\n                                    { keys: '0-2-1-1', title: '子结点 0-2-1-1' },\\n                                  ],\\n                              },\\n                              { keys: '0-2-2', title: '子结点 0-2-2' },\\n                            ],\\n                        },\\n                      ],\\n                  },\\n                ]\\n    };\\n  }\\n  render() {\\n    const { expandedKeys, checkedKeys, treeData } = this.state;\\n    console.log(\\\"checkedKeys\\\",checkedKeys)\\n    return (\\n      <div>\\n        <Tree treeData={treeData} expandedKeys={expandedKeys} checkedKeys={checkedKeys} canCheck />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 基础用法3\\n通过手写TreeNode结构来渲染树（会过滤非TreeNode节点）\\n\\n:::demo\\n```js\\n constructor(props) {\\n    super(props);\\n    this.state = {\\n        expandedKeys: ['0-1'],\\n        checkedKeys: ['0-0-0', '0-1'],\\n    }\\n }\\n\\n render() {\\n    const { expandedKeys, checkedKeys } = this.state;\\n    const { TreeNode } = Tree;\\n    return (\\n      <Tree expandedKeys={expandedKeys} canCheck defaultExpandAll checkedKeys={checkedKeys}>\\n        <TreeNode title=\\\"parent 1\\\" keys=\\\"0\\\">\\n        <div><p>invalid element here invalid element here</p></div>\\n        <TreeNode title=\\\"parent 1-0\\\" keys=\\\"0-0\\\" checkDisabled>\\n          <TreeNode title=\\\"leaf\\\" keys=\\\"0-0-0\\\" checkDisabled />\\n          <div>invalid element here invalid element here</div>\\n          <TreeNode title=\\\"leaf\\\" keys=\\\"0-0-1\\\" />\\n        </TreeNode>\\n        <TreeNode title=\\\"parent 1-1\\\" keys=\\\"0-1\\\">\\n          <TreeNode title={<span style={{ color: '#1890ff' }}>sss</span>} keys=\\\"0-1-0\\\" />\\n          <span style={{ color: '#1890ff' }}>invalid element here invalid element here</span>\\n        </TreeNode>\\n        </TreeNode>\\n        <div>invalid element here invalid element here\\n        <p>invalid element here invalid element here\\n          <span>\\n            invalid element here invalid element here\\n          </span>\\n        </p>\\n        </div>\\n        <i>invalid element here invalid element here</i>\\n        <span>invalid element here invalid element here</span>\\n      </Tree>\\n    )\\n }\\n```\\n:::\\n\\n### Tree Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| treeData    | 树节点结构数组  | array |   -  |   []  |\\n| canCheck    | 节点前添加Checkbox 复选框 | boolean |   true, false  |   false  |\\n| checkedKeys    | 选中复选框的树节点数组 | array |  -  |   []  |\\n| expandedKeys    | 展开指定的树节点 | array |  -  |   []  |\\n| defaultExpandAll    | 默认展开所有树节点 | boolean |   true, false  |   false  |\\n\\n### TreeNode Attributes\\n建议使用 treeData 来代替 TreeNode，免去手工构造麻烦\\n\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| title    |  标题  | string/ReactNode |   -  |   -  |\\n| keys    | 被树的 expandedKeys /checkedKeys属性所用。注意：整个树范围内的所有节点的keys值不能重复！（根节点keys为\\\"0\\\"） | string |   -  |   -  |\\n| checkDisabled    | 禁掉 checkbox | boolean |   true,false  |   false  |\\n| isLeaf    | 设置为叶子节点 | boolean |   true,false  |   false  |\\n\\n### Tree Events\\n| 事件名称 | 说明 | 回调参数 |\\n|---------- |-------- |---------- |\\n| onCheck | 点击复选框触发 |  (checkedMap，checkedObj）|\\n| onExpand | 展开/收起节点时触发 |  expandedObj  |\""],"sourceRoot":""}