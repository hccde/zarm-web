{"version":3,"sources":["webpack:///./components/pagination/pagination.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/29.20e75603.js","sourcesContent":["export default \"## Pagination 分页\\n一般配合Table组件做分页展示。\\n\\n### 基础用法\\n\\n最简单的分页。\\n\\n:::demo 只需要设置`total`，`pageSize`默认为10。\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Pagination total={100} />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 显示总数\\n\\n添加`showToal`属性即可。\\n\\n:::demo\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Pagination total={100} showTotal />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 显示跳转\\n\\n添加`showJumper`属性即可。\\n\\n:::demo\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Pagination total={100} showTotal showJumper />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 显示每页条数选择器\\n\\n添加`showPageSizeSelector`属性即可。\\n\\n:::demo\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Pagination total={100} showTotal showJumper showPageSizeSelector />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 设置页面下拉框的数据源\\n\\n添加`pageSizeSource`属性即可。\\n\\n:::demo\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Pagination total={100} pageSizeSource={[50,100,150]} showTotal showJumper showPageSizeSelector />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 事件回调\\n\\n通过`onPageChange`监听翻页和跳转，通过`onPageSizeChange`监听每页条数变更事件。\\n\\n:::demo\\n\\n```js\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      pageSize: 10\\n    }\\n  }\\n  render() {\\n    const { pageSize } = this.state;\\n    return (\\n      <div>\\n        <Pagination\\n          total={100}\\n          pageSize={pageSize}\\n          showJumper\\n          showPageSizeSelector\\n          onPageChange={(page) => {\\n            alert('翻页到：' + page);\\n          }}\\n          onPageSizeChange={(pageSize) => {\\n            alert('每页展示：' + pageSize);\\n            this.setState({\\n              pageSize\\n            });\\n          }}\\n        />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 事件回调\\n\\n通过`onChange`兼容`onPageSizeChange`与`onPageChange`，监听翻页和跳转以及每页条数变更事件。\\n\\n\\n:::demo\\n\\n```js\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      pageSize: 10,\\n      currentPage: 1,\\n    }\\n  }\\n  render() {\\n    const { pageSize, currentPage } = this.state;\\n    return (\\n      <div>\\n        <Pagination\\n          total={100}\\n          value={currentPage}\\n          pageSize={pageSize}\\n          showJumper\\n          showPageSizeSelector\\n          onChange={({pageSize, currentPage}) => {\\n            alert('每页展示：' + pageSize + ',且当前页是' + currentPage);\\n            this.setState({\\n              pageSize,\\n              currentPage,\\n            });\\n          }}\\n        />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 更多设置\\n\\n通过`radius`，`bordered`设置样式。\\n\\n:::demo\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Pagination\\n          total={100}\\n          radius\\n          bordered\\n          showJumper\\n          showPageSizeSelector\\n        />\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| value     | 当前页   | number  |   -            |    -   |\\n| defaultValue     | 默认页   | number   |   - |     1  |\\n| total     | 总数   | number    | — | 0   |\\n| pageSize     | 每页条数   | number    | — | 10   |\\n| pageSizeSource |页数下拉框的数据源 | number[] | - | [10,20,30,40,50]\\n| showTotal     | 是否展示总数   | boolean    | — | false  |\\n| showJumper     | 是否展示跳转   | boolean    | — | false   |\\n| showPageSizeSelector     | 是否展示每页条数选择器  | boolean   | — | false  |\\n| radius     | 是否圆角   | boolean    | — | false   |\\n| bordered     | 是否有边框   | boolean    | — | false   |\\n\\n\\n### Events\\n| 事件名称 | 说明 | 回调参数 |\\n|---------- |-------- |---------- |\\n| onPageChange | 翻页或跳转触发的事件 | page |\\n| onPageSizeChange | 每页展示条数变更触发的事件 | pageSize |\\n| onChange |监听翻页和跳转以及每页条数变更事件。 | {pageSize, currentPage} |\\n\""],"sourceRoot":""}