{"version":3,"sources":["webpack:///./components/select/select.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/35.c0739cbe.js","sourcesContent":["export default \"## Select 选择器\\n\\n常用的下拉选择器。\\n\\n### 基础用法\\n\\n最简单的选择器。\\n\\n:::demo 通过`value`设置值，通过`onChange`来监听值的变化。\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      value: '',\\n      data: []\\n    };\\n    this.ref = React.createRef();\\n  }\\n  componentDidMount(){\\n    setTimeout(()=>{\\n      // mock async data\\n      this.setState({\\n        data: [\\n          {\\n            value: '',\\n            text: '全部',\\n          },\\n          {\\n            value: 'a',\\n            text: '我是A'\\n          },\\n          {\\n            value: 'b',\\n            text: '我是B'\\n          }\\n        ]\\n      });\\n      console.log(this.ref.current);\\n    }, 1000);\\n  }\\n  render() {\\n    const { data } = this.state;\\n    return (\\n      <div>\\n        <Select\\n          style={{ width: 200 }}\\n          ref={this.ref}\\n          onChange={(data) => {\\n            console.log(data);\\n            this.setState({\\n              selectValue : data.value,\\n            });\\n        }}>\\n          {\\n            data.map(({ value, text }) => {\\n              return (\\n                <Select.Option key={value} value={value}>{text}</Select.Option>\\n              )\\n            })\\n          }\\n\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 是否禁用\\n\\n添加`disabled`属性即可禁用。\\n\\n:::demo\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Select\\n          disabled\\n          title=\\\"我是A\\\"\\n          style={{ width: 200 }}\\n          value=\\\"a\\\"\\n        >\\n          <Select.Option value=\\\"a\\\">我是A</Select.Option>\\n          <Select.Option value=\\\"b\\\" disabled>我是B</Select.Option>\\n          <Select.Option value=\\\"c\\\">我是C</Select.Option>\\n          <Select.Option value=\\\"d\\\">我是D</Select.Option>\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 支持本地搜索\\n\\n支持输入框搜索选项。\\n\\n:::demo 添加`search`属性，通过`onSearchChange`监听输入框值的变化。\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      selectValue: ''\\n    }\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Select\\n          search\\n          value={this.state.selectValue}\\n          style={{ width: 200 }}\\n          // searchPlaceholder=\\\"输入关键字\\\"\\n          onSearchChange={(value) => {\\n            console.log(value)\\n          }}\\n          onChange={(data) => {\\n            console.log(data);\\n            this.setState({\\n              selectValue: data.value\\n            });\\n          }}>\\n          <Select.Option value=\\\"a\\\">我是A</Select.Option>\\n          <Select.Option value=\\\"b\\\">我是B</Select.Option>\\n          <Select.Option value=\\\"c\\\">我是C</Select.Option>\\n          <Select.Option value=\\\"d\\\">我是D</Select.Option>\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 支持远程搜索\\n\\n支持输入框搜索选项。\\n\\n:::demo 添加`search`属性，通过`onSearchChange`监听输入框值的变化。\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      selectValue: '',\\n      options: []\\n    }\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <Select\\n          remoteSearch\\n          value={this.state.selectValue}\\n          style={{ width: 200 }}\\n          searchPlaceholder=\\\"输入关键字\\\"\\n          onSearchChange={(value) => {\\n            console.log(value)\\n             setTimeout(() => {\\n                this.setState({ options: [`${value}1`,`${value}2`,`${value}3`,`${value}4`,`${value}5`] })\\n             }, 1000)\\n          }}\\n          onChange={(data) => {\\n            this.setState({\\n              selectValue: data.value\\n            }, () => {\\n              console.log(this.state.selectValue);\\n            });\\n          }}\\n        >\\n          {this.state.options.map(elem => <Select.Option key={elem} value={elem}>{elem}</Select.Option>)}\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n\\n### 多选\\n\\n支持输入框多选。\\n\\n:::demo 添加`multiple`属性，可支持多选。\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      selectValue: ['a'],\\n      b:'123',\\n      c:'456'\\n    }\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Select\\n          multiple\\n          value={this.state.selectValue}\\n          style={{ width: 200 }}\\n          onChange={(selectedArr,selectedData) => {\\n            console.log(selectedArr, selectedData);\\n            this.setState({\\n              selectValue: selectedArr\\n            });\\n          }}>\\n          <Select.Option value=\\\"a\\\">{[this.state.c,this.state.b]}</Select.Option>\\n          <Select.Option value=\\\"b\\\">我是B</Select.Option>\\n          <Select.Option value=\\\"c\\\">我是C</Select.Option>\\n          <Select.Option value=\\\"d\\\">我是D</Select.Option>\\n           <Select.Option value=\\\"e\\\">我是E</Select.Option>\\n          <Select.Option value=\\\"f\\\">我是F</Select.Option>\\n          <Select.Option value=\\\"g\\\">我是G</Select.Option>\\n          <Select.Option value=\\\"h\\\">我是H</Select.Option>\\n          <Select.Option value=\\\"\\\">我的value是空字符串</Select.Option>\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n\\n### 多选并支持查找\\n\\n支持输入框搜索选项。\\n\\n:::demo 添加`multiple` 和`search`属性，可支持多选和查找。\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      selectValue: ['a']\\n    }\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Select\\n          tagTheme=\\\"info\\\"\\n          search\\n          multiple\\n          value={this.state.selectValue}\\n          style={{ width: 200 }}\\n          onChange={(selectedArr) => {\\n            console.log(selectedArr);\\n            this.setState({\\n              selectValue: selectedArr\\n            });\\n          }}>\\n          <Select.Option value=\\\"a\\\">我是A</Select.Option>\\n          <Select.Option value=\\\"b\\\">我是B</Select.Option>\\n          <Select.Option value=\\\"c\\\">我是C</Select.Option>\\n          <Select.Option value=\\\"d\\\">我是D</Select.Option>\\n          <Select.Option value=\\\"e\\\">我是E</Select.Option>\\n          <Select.Option value=\\\"f\\\">我是F</Select.Option>\\n          <Select.Option value=\\\"g\\\">我是G</Select.Option>\\n          <Select.Option value=\\\"h\\\">我是H</Select.Option>\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n注意事项\\n+ 当`multiple`属性为`true`时, `value`需要为`Array<string>`类型\\n+ 当`multiple`属性为`true`时, `onChange`的回调参数为`(selectedValueArr,selectedValueData)`,数据类型如下：\\n```\\ntype selectedValueArr = Array<string>;\\ntype selectedValueData = Array<{value:string; text:ReactNode; index:number}>;\\n```\\n+ onChange回调的参数中的`value`值类型始终为`string`;\\n+ 当`multiple`属性为`true`时,若参数`value`中存在目前`option`列表中不存在的元素：则不会显示该元素，但也不会删除该元素。例如：\\n```js\\n  this.state = {\\n      selectValue: ['i am not the one']\\n  }\\n  render() {\\n    return (\\n        <Select\\n          multiple\\n          value={this.state.selectValue}\\n          onChange={(selectedArr) => {\\n            console.log(selectedArr);\\n            this.setState({\\n              selectValue: selectedArr\\n            });\\n          }}>\\n          <Select.Option value=\\\"a\\\">我是A</Select.Option>\\n          <Select.Option value=\\\"b\\\">我是B</Select.Option>\\n        </Select>\\n    )\\n  }\\n```\\n以上代码中`'i am not the one'`并不存在于Select.Option中，当你执行`onChange`操作的时候`selectedArr`中依然会保留改字段,但并不会显示在输入框内。\\n\\n\\n### 更多设置\\n\\n通过`radius`设置圆角。\\n\\n:::demo\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      selectValue: ''\\n    }\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Select\\n          radius\\n          value={this.state.selectValue}\\n          style={{ width: 200 }}\\n          // searchPlaceholder=\\\"输入关键字\\\"\\n          onChange={(data) => {\\n            this.setState({\\n              selectValue: data.value\\n            });\\n          }}>\\n          <Select.Option value=\\\"a\\\">我是A</Select.Option>\\n          <Select.Option value=\\\"b\\\">我是B</Select.Option>\\n          <Select.Option value=\\\"c\\\">我是C</Select.Option>\\n          <Select.Option value=\\\"d\\\">我是D</Select.Option>\\n        </Select>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n\\n### Select Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| value     | 选中值   | string, string[] |   -            |    -   |\\n| defaultValue     | 默认选中值   | string  |   - |     1  |\\n| radius     | 是否圆角   | boolean   | — | false  |\\n| search     | 是否支持搜索   | boolean    | — | false   |\\n| disabled  | 禁用    | -   | -  | -   |\\n| isDisabled  | 是否禁用    | boolean   | true, false   | false   |\\n| tagTheme     | 多选状态下的tag标签主题   | string   | — | default  |\\n| size | Select组件的大小 | string | xs,sm,lg,xl | - |\\n\\n### Select Events\\n| 事件名称 | 说明 | 回调参数 |\\n|---------- |-------- |---------- |\\n| onChange | 选项变更时候触发的事件 |  { index, value, text }|\\n| onSearchChange | 搜索框值变更触发的事件 | searchValue |\\n\\n\\n### Select.Multiple Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| value     | 选中值   | string |   -            |    -   |\\n| defaultValue     | 默认选中值   | string  |   - |     1  |\\n| radius     | 是否圆角   | boolean   | — | false  |\\n| disabled  | 禁用    | -   | -  | -   |\\n| isDisabled  | 是否禁用    | boolean   | true, false   | false   |\\n\\n### Select.Multiple Events\\n| 事件名称 | 说明 | 回调参数 |\\n|---------- |-------- |---------- |\\n| onChange | 选项变更时候触发的事件 |  { index, value, text }|\\n| onDoubleClick | 双击选项触发的事件 | searchValue |\\n\\n\\n### Option Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| checked     | 是否选中   | boolean   | — | false  |\\n| disabled     | 是否禁用   | boolean   | — | false  |\\n| value | 当前option组件的value值（必填） | string | - | - |\\n\""],"sourceRoot":""}