(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{654:function(n,e,a){"use strict";a.r(e),e.default='## Form \u8868\u5355\n\u8868\u5355\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5305\u88f9\u8868\u5355\u5143\u7d20\u7ec4\u4ef6\u3002\n\n### \u57fa\u7840\u7528\u6cd5\n\n:::demo \u4f7f\u7528`Fomr.Item`\u5305\u88f9`Input`,`Button`\u7b49\u8868\u5355\u5143\u7d20\u7ec4\u4ef6\u3002\n\n```js\n  render() {\n    return (\n      <div>\n        <Form>\n          <Form.Item label="\u8d26\u53f7">\n            <Input placeholder="\u8bf7\u8f93\u5165..." />\n          </Form.Item>\n          <Form.Item label="\u5bc6\u7801">\n            <Input placeholder="\u8bf7\u8f93\u5165..." />\n          </Form.Item>\n          <Form.Item>\n            <Button theme="primary">\u767b\u5f55</Button>\n          </Form.Item>\n        </Form>\n      </div>\n    )\n  }\n```\n:::\n\n\n### \u8868\u5355\u9a8c\u8bc1\n\n:::demo \n  rules\u652f\u6301\u5916\u90e8\u548cForm.Item\u7684\u5185\u8054\u5f62\u5f0f, \u56de\u8c03\u652f\u6301promise\u548ccallback\u4e24\u79cd\u5f62\u5f0f,\n  \u5982\u679c\u9700\u8981\u91cd\u7f6e\u8868\u5355\u503c \u9700\u8981\u5982\u4e0b\u9762\u4f8b\u5b50<font color=red size=2 >\u624b\u52a8\u8c03\u7528forceUpdate</font>\u7684\u66f4\u65b0\u4e00\u6b21\u7ec4\u4ef6,\n  \u5426\u5219\u53ea\u4f1a\u91cd\u7f6e\u7ec4\u4ef6\u7684\u9a8c\u8bc1\u548c\u5185\u90e8\u6570\u636e, \u9875\u9762\u4e0d\u4f1a\u66f4\u65b0\n  \u66f4\u591a\u5173\u4e8e\u9a8c\u8bc1\u7684\u65b9\u6cd5\u8bf7\u53c2\u8003 <br/> <a href="https://github.com/yiminghe/async-validator" target="_blank">async-validator</a>\n```js\n  constructor (props) {\n    super(props)\n    this.state = {\n      params: {\n        account: \'\',\n        password: \'\',\n        sex: \'\',\n        habits: [],\n        birthday: \'\',\n        size: \'\',\n      },\n      rules: {\n        account: [\n          { required: true, message: \'\u8bf7\u8f93\u5165\u8d26\u53f7\', trigger: \'blur\' },\n          { type: \'string\', min: 6, max: 10, message: \'\u5fc5\u987b\u57286\u523010\u4e2a\u5b57\u7b26\', trigger: \'blur,change\' },\n        ],\n        sex: [\n          { required: true, message: \'\u8bf7\u9009\u62e9\u6027\u522b\', trigger: \'change\' }\n        ],\n        habits: [\n          { type: \'array\', required: true, message: \'\u81f3\u5c11\u9009\u62e9\u4e00\u79cd\u52a8\u7269\', trigger: \'change\' }\n        ],\n        birthday: [\n          { required: true, message: \'\u8bf7\u9009\u62e9\u51fa\u751f\u65e5\u671f\', trigger: \'change\' }\n        ],\n        size: [\n          { required: true, message: \'\u8bf7\u9009\u62e9\u5c3a\u5bf8\', trigger: \'change\' }\n        ]\n      }\n    }\n  }\n  handleSubmit (e) {\n    this.form.validate().then(res => {\n      if (res) {\n        Notification.success({ title: \'\u6210\u529f\', message: \'\u8868\u5355\u9a8c\u8bc1\u901a\u8fc7\' })\n      } else {\n        Notification.danger({ title: \'\u5931\u8d25\', message: \'\u8868\u5355\u9a8c\u8bc1\u5931\u8d25\' })\n      }\n    })\n  }\n  \n  handleReset () {\n    this.form.resetField();\n    console.log(this.state)\n    this.forceUpdate();\n  }\n  \n  render() {\n    const { params } = this.state\n    return (\n      <div>\n        <Form type="inline" scrollToError onSubmit={this.handleSubmit.bind(this)} labelWidth="90" labelPosition="left" ref={el => this.form = el} model={this.state.params} rules={this.state.rules} onSubmit={this.handleSubmit.bind(this)}>\n          <Form.Item className="col-xs-24" label="\u8d26\u53f7" prop="account">\n            <Input\n              placeholder="\u8bf7\u8f93\u5165..."\n              value={params.account}\n              onChange={(e) => {\n                params.account = e.target.value\n                this.setState({ params })\n              }}\n            />\n          </Form.Item>\n          <Form.Item \n            className="col-xs-24"\n            label="\u5bc6\u7801" \n            prop="password" \n            rules={\n              [\n                { required: true, message: \'\u8bf7\u8f93\u5165\u5bc6\u7801\', trigger: \'blur\' },\n                { type: \'string\', min: 8, max: 16, message: \'\u5bc6\u7801\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u516b\u4f4d\u5c0f\u4e8e\u7b49\u4e8e16\u4f4d\', trigger: \'change, blur\' }\n              ]\n            }\n          >\n            <Input\n              value={params.password}\n              placeholder="\u8bf7\u8f93\u5165..." \n              onChange={(e) => {\n                params.password = e.target.value\n                this.setState({ params })\n              }}\n            />\n          </Form.Item>\n          <Form.Item className="col-xs-24" label="\u6027\u522b" prop="sex">\n            <Select\n              searchPlaceholder="\u8bf7\u9009\u62e9\u6027\u522b"\n              value={params.sex}\n              onChange={(data) => {\n                params.sex = data.value\n                this.setState({ params })\n            }}>\n              <Select.Option key="boy" value="boy">boy</Select.Option>\n              <Select.Option key="girl" value="girl">girl</Select.Option>\n            </Select>\n          </Form.Item>\n          <Form.Item className="col-xs-24" label="\u51fa\u751f\u65e5\u671f" prop="birthday">\n            <DatePicker\n              radius\n              allowInput\n              style={{ width: 200 }}\n              value={params.birthday}\n              placeholder="\u8bf7\u9009\u62e9\u65e5\u671f"\n              onChange={(date) => {\n                params.birthday = date\n                this.setState({ params })\n              }}\n            />\n          </Form.Item>\n          <Form.Item className="col-xs-24" label="\u7231\u597d" prop="habits">\n            <Checkbox.Group\n              value={params.habits}\n              onChange={(values) => {\n                params.habits = values\n                this.setState({ params })\n              }}\n            >\n              <Checkbox value="\u517b\u732a">\u517b\u732a</Checkbox>\n              <Checkbox value="\u517b\u725b">\u517b\u725b</Checkbox>\n              <Checkbox value="\u517b\u72d7">\u517b\u72d7</Checkbox>\n              <Checkbox value="\u517b\u732b">\u517b\u732b</Checkbox>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item className="col-xs-24" prop="size" label="\u5c3a\u5bf8">\n              <Radio.Group\n                value={params.size}\n                onChange={(e) => {\n                  params.size = e.target.value\n                  this.setState({ params })\n                }}\n              >\n                <Radio value="a">A</Radio>\n                <Radio value="b">B</Radio>\n              </Radio.Group>\n          </Form.Item>\n          <Form.Item className="col-xs-24">\n            <Button theme="primary" htmlType="submit">\u767b\u5f55</Button>\n            <Button theme="default" onClick={this.handleReset.bind(this)}>\u91cd\u7f6e</Button>\n          </Form.Item>\n        </Form>\n      </div>\n    )\n  }\n```\n:::\n\n### \u81ea\u5b9a\u4e49\u9a8c\u8bc1\n\n:::demo \u81ea\u5b9a\u4e49\u8868\u5355\u9879\u7684\u9a8c\u8bc1\n\n```js\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      params: {\n        password: \'\',\n        confirmPassword: \'\',\n        money: \'\'\n      },\n      rules: {\n        password: [\n          { required: true, message: \'\u8bf7\u8f93\u5165\u5bc6\u7801\', trigger: \'blur\' },\n          {\n            validator: (rule, value, callback) => {\n              if (value === \'\') {\n                callback(new Error(\'\u8bf7\u8f93\u5165\u5bc6\u7801\'));\n              } else {\n                if (this.state.params.confirmPassword !== \'\') {\n                  this.formRef.validateField(\'confirmPassword\');\n                }\n                callback();\n              }\n            },\n            trigger: \'blur\'\n          }\n        ],\n        confirmPassword: [\n          { require: true, message: \'\u8bf7\u8f93\u5165\u786e\u8ba4\u5bc6\u7801\', trigger: \'blur\' },\n          {\n            validator: (rule, value, callback) => {\n              const val = Number(value)\n              if (val !== Number(this.state.params.password)) {\n                callback(new Error(\'\u4e24\u6b21\u8f93\u5165\u5bc6\u7801\u5fc5\u987b\u4e00\u81f4\u54e6\uff01\'))\n              } else {\n                callback()\n              }\n            },\n            trigger: \'blur\'\n          }\n        ],\n        money: [\n          { required: true, message: \'\u8bf7\u8f93\u5165\u91cd\u7f6e\u91d1\u989d\', trigger: \'blur\' },\n          {\n            validator: (rule, value, callback) => {\n              const val = Number(value)\n              if (!Number.isInteger(val)) {\n                callback(new Error(\'\u91cd\u7f6e\u91d1\u989d\u5fc5\u987b\u4e3a\u6570\u5b57\'))\n              } else if (Number(val) > 1000) {\n                callback(new Error(\'\u91cd\u7f6e\u91d1\u989d\u5fc5\u987b\u5c0f\u4e8e1000 \uff01\uff01\'))\n              } else {\n                callback()\n              }\n            },\n            trigger: \'change,blur\'\n          },\n        ],\n      }\n    }\n  }\n  handleSubmit() {\n    this.formRef.validate(result => {\n      if (result) {\n        Message.success(\'validate success\')\n      } else {\n        Message.danger(\'validate fail\')\n      }\n    })\n  }\n  \n  render() {\n    const { params, rules } = this.state;\n    \n    return (\n      <Form model={params} rules={rules} ref={el => this.formRef = el}>\n        <Form.Item\n          label="\u5bc6\u7801"\n          prop="password"\n        >\n          <Input \n            placeholder="\u8bf7\u8f93\u5165\u5bc6\u7801" \n            value={params.password}\n            onChange={e => {\n              params.password = e.target.value\n              this.setState({ params })\n            }}\n          />\n        </Form.Item>\n        \n        <Form.Item\n          label="\u786e\u8ba4\u5bc6\u7801"\n          prop="confirmPassword"\n          required\n        >\n          <Input \n            placeholder="\u8bf7\u518d\u6b21\u8f93\u5165\u5bc6\u7801" \n            value={params.confirmPassword}\n            onChange={e => {\n              params.confirmPassword = e.target.value\n              this.setState({ params })\n            }}\n          />\n        </Form.Item>\n        \n        <Form.Item\n          label="\u91cd\u7f6e\u91d1\u989d"\n          prop="money"\n        >\n          <Input \n            placeholder="\u8bf7\u8f93\u5165\u91cd\u7f6e\u91d1\u989d" \n            value={params.money}\n            onChange={e => {\n              params.money = e.target.value\n              this.setState({ params })\n            }}\n          />\n        </Form.Item>\n        \n        <Form.Item>\n          <Button theme="primary" onClick={this.handleSubmit.bind(this)}>\u786e\u8ba4</Button>\n        </Form.Item>\n      </Form>\n    )\n  }\n```\n:::\n\n### \u52a8\u6001\u8868\u5355\u9a8c\u8bc1\n\n:::demo \u52a8\u6001\u8868\u5355\u8868\u5355\u9879\u7684\u9a8c\u8bc1\n\n```js\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      family: {\n        people: [\n          { name: \'\' }\n        ]\n      }\n    }\n  }\n  handleAdd() {\n    const people = this.state.family.people\n    people.push({ name: \'\' })\n    this.setState({\n      family: {\n        people\n      }\n    })\n  }\n  handleDel(index) {\n    const people = this.state.family.people\n    people.splice(index, 1)\n    this.setState({\n      family: {\n        people\n      }\n    })\n  }\n  handleSubmit() {\n    this.formRef.validate(result => {\n      if (result) {\n        Message.success(\'congratulation! validate success\')\n      } else {\n        Message.danger(\'sorry, validate failed\')\n      } \n    })\n  }\n  \n  render() {\n    const { people } = this.state.family\n    return (\n      <Form type="inline" model={this.state.family} ref={el => this.formRef = el} labelWidth={90}>\n        {\n          people.map((person, index) => (\n            <Form.Item\n              className="col-xs-24"\n              key={person+index}\n              label={`\u5bb6\u4eba${index + 1}`}\n              prop={`people.${index}`}\n              rules={\n                { \n                  type: \'object\', \n                  required: true, \n                  fields: {\n                    name: [\n                      { required: true, message: \'\u59d3\u540d\u4e0d\u80fd\u4e3a\u7a7a\', trigger: \'blur\' },\n                      { type: \'string\', min:3, max: 6, message: \'\u59d3\u540d\u5fc5\u987b\u57283\u52306\u4e2a\u5b57\u7b26\', trigger: \'change\' }\n                    ]\n                  } \n                }\n              }\n            >\n              <Input \n                placeholder="\u8bf7\u8f93\u5165\u5bb6\u4eba\u59d3\u540d" \n                style={{ width: 300 }}\n                value={person.name}\n                onChange={e => {\n                  people[index].name = e.target.value\n                  this.setState({\n                    family: {\n                      people\n                    }\n                  })\n                }}\n              />\n              <Button shape="circle" style={{ borderColor: \'transparent\' }} onClick={this.handleDel.bind(this, index)}>\n                <Icon type="minus-round" style={{ fontSize: 20, color: \'#909090\' }} />\n              </Button>\n            </Form.Item>\n          ))\n        }\n        <Form.Item className="col-xs-24" label={\'\'}>\n          <Button style={{ width: 300, background: \'#e6e6e6\'}} onClick={this.handleAdd.bind(this)}>\n            <Icon type="add" style={{ marginRight: 12 }} />\u6dfb\u52a0\n          </Button>\n        </Form.Item>\n        <Form.Item className="col-xs-24" label={\'\'}>\n          <Button theme="primary" onClick={this.handleSubmit.bind(this)}>Submit</Button>\n        </Form.Item>\n      </Form>\n    )\n  }\n```\n:::\n\n\n### Form Attributes\n| \u53c2\u6570      | \u8bf4\u660e    | \u7c7b\u578b      | \u53ef\u9009\u503c       | \u9ed8\u8ba4\u503c   |\n|---------- |-------- |---------- |-------------  |-------- |\n| type     | \u7c7b\u578b   | string  |   inline/horizontal       |    horizontal    |\n| model     | \u8868\u5355\u6570\u636e\u5bf9\u8c61   | object  |   -       |    -    |\n| rules     | \u8868\u5355\u6821\u9a8c\u89c4\u5219   | object  |   -       |    -    |\n| scrollToError     | \u63d0\u4ea4\u8868\u5355\u65f6\u662f\u5426\u6eda\u52a8\u5230\u7b2c\u4e00\u4e2a\u9519\u8bef\u4f4d\u7f6e   | boolean  |   -       |    false    |\n\n### Form Method\n| \u53c2\u6570       | \u8bf4\u660e    | \u7c7b\u578b      | \u53ef\u9009\u503c       | \u9ed8\u8ba4\u503c   |\n|---------- |-------- |---------- |-------------  |-------- |\n| validate  | \u8868\u5355\u9a8c\u8bc1\u65b9\u6cd5   | func  |   -       |    -    |\n| validateField        | \u5bf9\u8868\u5355\u5355\u9879\u8fdb\u884c\u9a8c\u8bc1   | func  |   -       |    -    |\n| resetField        | \u5bf9\u8868\u5355\u6570\u636emodel\u91cd\u7f6e   | func  |   -       |    -    |\n\n### Form.Item Attributes\n| \u53c2\u6570      | \u8bf4\u660e    | \u7c7b\u578b      | \u53ef\u9009\u503c       | \u9ed8\u8ba4\u503c   |\n|---------- |-------- |---------- |-------------  |-------- |\n| required    | \u662f\u5426\u5fc5\u586b | boolean  |   -     |   false  |\n| rules    | \u6821\u9a8c\u89c4\u5219(\u4f18\u5148\u7ea7\u9ad8\u7ea7\u5916\u90e8rules) | object/array  |   -     |   -  |\n| label    | label\u6587\u6848 | string  |   -     |   - |\n| labelWidth    | label\u6805\u683c\u5bbd\u5ea6 | string/number  |   -     |   - |\n| labelPosition    | label\u5bf9\u5176\u4f4d\u7f6e | left/right  |   -     |   - |\n\n\n\n\n'}}]);
//# sourceMappingURL=16.08338d73.js.map