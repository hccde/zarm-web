{"version":3,"sources":["webpack:///./components/form/form.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/16.08338d73.js","sourcesContent":["export default \"## Form 表单\\n表单组件，用于包裹表单元素组件。\\n\\n### 基础用法\\n\\n:::demo 使用`Fomr.Item`包裹`Input`,`Button`等表单元素组件。\\n\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Form>\\n          <Form.Item label=\\\"账号\\\">\\n            <Input placeholder=\\\"请输入...\\\" />\\n          </Form.Item>\\n          <Form.Item label=\\\"密码\\\">\\n            <Input placeholder=\\\"请输入...\\\" />\\n          </Form.Item>\\n          <Form.Item>\\n            <Button theme=\\\"primary\\\">登录</Button>\\n          </Form.Item>\\n        </Form>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n\\n### 表单验证\\n\\n:::demo \\n  rules支持外部和Form.Item的内联形式, 回调支持promise和callback两种形式,\\n  如果需要重置表单值 需要如下面例子<font color=red size=2 >手动调用forceUpdate</font>的更新一次组件,\\n  否则只会重置组件的验证和内部数据, 页面不会更新\\n  更多关于验证的方法请参考 <br/> <a href=\\\"https://github.com/yiminghe/async-validator\\\" target=\\\"_blank\\\">async-validator</a>\\n```js\\n  constructor (props) {\\n    super(props)\\n    this.state = {\\n      params: {\\n        account: '',\\n        password: '',\\n        sex: '',\\n        habits: [],\\n        birthday: '',\\n        size: '',\\n      },\\n      rules: {\\n        account: [\\n          { required: true, message: '请输入账号', trigger: 'blur' },\\n          { type: 'string', min: 6, max: 10, message: '必须在6到10个字符', trigger: 'blur,change' },\\n        ],\\n        sex: [\\n          { required: true, message: '请选择性别', trigger: 'change' }\\n        ],\\n        habits: [\\n          { type: 'array', required: true, message: '至少选择一种动物', trigger: 'change' }\\n        ],\\n        birthday: [\\n          { required: true, message: '请选择出生日期', trigger: 'change' }\\n        ],\\n        size: [\\n          { required: true, message: '请选择尺寸', trigger: 'change' }\\n        ]\\n      }\\n    }\\n  }\\n  handleSubmit (e) {\\n    this.form.validate().then(res => {\\n      if (res) {\\n        Notification.success({ title: '成功', message: '表单验证通过' })\\n      } else {\\n        Notification.danger({ title: '失败', message: '表单验证失败' })\\n      }\\n    })\\n  }\\n  \\n  handleReset () {\\n    this.form.resetField();\\n    console.log(this.state)\\n    this.forceUpdate();\\n  }\\n  \\n  render() {\\n    const { params } = this.state\\n    return (\\n      <div>\\n        <Form type=\\\"inline\\\" scrollToError onSubmit={this.handleSubmit.bind(this)} labelWidth=\\\"90\\\" labelPosition=\\\"left\\\" ref={el => this.form = el} model={this.state.params} rules={this.state.rules} onSubmit={this.handleSubmit.bind(this)}>\\n          <Form.Item className=\\\"col-xs-24\\\" label=\\\"账号\\\" prop=\\\"account\\\">\\n            <Input\\n              placeholder=\\\"请输入...\\\"\\n              value={params.account}\\n              onChange={(e) => {\\n                params.account = e.target.value\\n                this.setState({ params })\\n              }}\\n            />\\n          </Form.Item>\\n          <Form.Item \\n            className=\\\"col-xs-24\\\"\\n            label=\\\"密码\\\" \\n            prop=\\\"password\\\" \\n            rules={\\n              [\\n                { required: true, message: '请输入密码', trigger: 'blur' },\\n                { type: 'string', min: 8, max: 16, message: '密码必须大于等于八位小于等于16位', trigger: 'change, blur' }\\n              ]\\n            }\\n          >\\n            <Input\\n              value={params.password}\\n              placeholder=\\\"请输入...\\\" \\n              onChange={(e) => {\\n                params.password = e.target.value\\n                this.setState({ params })\\n              }}\\n            />\\n          </Form.Item>\\n          <Form.Item className=\\\"col-xs-24\\\" label=\\\"性别\\\" prop=\\\"sex\\\">\\n            <Select\\n              searchPlaceholder=\\\"请选择性别\\\"\\n              value={params.sex}\\n              onChange={(data) => {\\n                params.sex = data.value\\n                this.setState({ params })\\n            }}>\\n              <Select.Option key=\\\"boy\\\" value=\\\"boy\\\">boy</Select.Option>\\n              <Select.Option key=\\\"girl\\\" value=\\\"girl\\\">girl</Select.Option>\\n            </Select>\\n          </Form.Item>\\n          <Form.Item className=\\\"col-xs-24\\\" label=\\\"出生日期\\\" prop=\\\"birthday\\\">\\n            <DatePicker\\n              radius\\n              allowInput\\n              style={{ width: 200 }}\\n              value={params.birthday}\\n              placeholder=\\\"请选择日期\\\"\\n              onChange={(date) => {\\n                params.birthday = date\\n                this.setState({ params })\\n              }}\\n            />\\n          </Form.Item>\\n          <Form.Item className=\\\"col-xs-24\\\" label=\\\"爱好\\\" prop=\\\"habits\\\">\\n            <Checkbox.Group\\n              value={params.habits}\\n              onChange={(values) => {\\n                params.habits = values\\n                this.setState({ params })\\n              }}\\n            >\\n              <Checkbox value=\\\"养猪\\\">养猪</Checkbox>\\n              <Checkbox value=\\\"养牛\\\">养牛</Checkbox>\\n              <Checkbox value=\\\"养狗\\\">养狗</Checkbox>\\n              <Checkbox value=\\\"养猫\\\">养猫</Checkbox>\\n            </Checkbox.Group>\\n          </Form.Item>\\n          <Form.Item className=\\\"col-xs-24\\\" prop=\\\"size\\\" label=\\\"尺寸\\\">\\n              <Radio.Group\\n                value={params.size}\\n                onChange={(e) => {\\n                  params.size = e.target.value\\n                  this.setState({ params })\\n                }}\\n              >\\n                <Radio value=\\\"a\\\">A</Radio>\\n                <Radio value=\\\"b\\\">B</Radio>\\n              </Radio.Group>\\n          </Form.Item>\\n          <Form.Item className=\\\"col-xs-24\\\">\\n            <Button theme=\\\"primary\\\" htmlType=\\\"submit\\\">登录</Button>\\n            <Button theme=\\\"default\\\" onClick={this.handleReset.bind(this)}>重置</Button>\\n          </Form.Item>\\n        </Form>\\n      </div>\\n    )\\n  }\\n```\\n:::\\n\\n### 自定义验证\\n\\n:::demo 自定义表单项的验证\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    \\n    this.state = {\\n      params: {\\n        password: '',\\n        confirmPassword: '',\\n        money: ''\\n      },\\n      rules: {\\n        password: [\\n          { required: true, message: '请输入密码', trigger: 'blur' },\\n          {\\n            validator: (rule, value, callback) => {\\n              if (value === '') {\\n                callback(new Error('请输入密码'));\\n              } else {\\n                if (this.state.params.confirmPassword !== '') {\\n                  this.formRef.validateField('confirmPassword');\\n                }\\n                callback();\\n              }\\n            },\\n            trigger: 'blur'\\n          }\\n        ],\\n        confirmPassword: [\\n          { require: true, message: '请输入确认密码', trigger: 'blur' },\\n          {\\n            validator: (rule, value, callback) => {\\n              const val = Number(value)\\n              if (val !== Number(this.state.params.password)) {\\n                callback(new Error('两次输入密码必须一致哦！'))\\n              } else {\\n                callback()\\n              }\\n            },\\n            trigger: 'blur'\\n          }\\n        ],\\n        money: [\\n          { required: true, message: '请输入重置金额', trigger: 'blur' },\\n          {\\n            validator: (rule, value, callback) => {\\n              const val = Number(value)\\n              if (!Number.isInteger(val)) {\\n                callback(new Error('重置金额必须为数字'))\\n              } else if (Number(val) > 1000) {\\n                callback(new Error('重置金额必须小于1000 ！！'))\\n              } else {\\n                callback()\\n              }\\n            },\\n            trigger: 'change,blur'\\n          },\\n        ],\\n      }\\n    }\\n  }\\n  handleSubmit() {\\n    this.formRef.validate(result => {\\n      if (result) {\\n        Message.success('validate success')\\n      } else {\\n        Message.danger('validate fail')\\n      }\\n    })\\n  }\\n  \\n  render() {\\n    const { params, rules } = this.state;\\n    \\n    return (\\n      <Form model={params} rules={rules} ref={el => this.formRef = el}>\\n        <Form.Item\\n          label=\\\"密码\\\"\\n          prop=\\\"password\\\"\\n        >\\n          <Input \\n            placeholder=\\\"请输入密码\\\" \\n            value={params.password}\\n            onChange={e => {\\n              params.password = e.target.value\\n              this.setState({ params })\\n            }}\\n          />\\n        </Form.Item>\\n        \\n        <Form.Item\\n          label=\\\"确认密码\\\"\\n          prop=\\\"confirmPassword\\\"\\n          required\\n        >\\n          <Input \\n            placeholder=\\\"请再次输入密码\\\" \\n            value={params.confirmPassword}\\n            onChange={e => {\\n              params.confirmPassword = e.target.value\\n              this.setState({ params })\\n            }}\\n          />\\n        </Form.Item>\\n        \\n        <Form.Item\\n          label=\\\"重置金额\\\"\\n          prop=\\\"money\\\"\\n        >\\n          <Input \\n            placeholder=\\\"请输入重置金额\\\" \\n            value={params.money}\\n            onChange={e => {\\n              params.money = e.target.value\\n              this.setState({ params })\\n            }}\\n          />\\n        </Form.Item>\\n        \\n        <Form.Item>\\n          <Button theme=\\\"primary\\\" onClick={this.handleSubmit.bind(this)}>确认</Button>\\n        </Form.Item>\\n      </Form>\\n    )\\n  }\\n```\\n:::\\n\\n### 动态表单验证\\n\\n:::demo 动态表单表单项的验证\\n\\n```js\\n  constructor(props) {\\n    super(props)\\n    \\n    this.state = {\\n      family: {\\n        people: [\\n          { name: '' }\\n        ]\\n      }\\n    }\\n  }\\n  handleAdd() {\\n    const people = this.state.family.people\\n    people.push({ name: '' })\\n    this.setState({\\n      family: {\\n        people\\n      }\\n    })\\n  }\\n  handleDel(index) {\\n    const people = this.state.family.people\\n    people.splice(index, 1)\\n    this.setState({\\n      family: {\\n        people\\n      }\\n    })\\n  }\\n  handleSubmit() {\\n    this.formRef.validate(result => {\\n      if (result) {\\n        Message.success('congratulation! validate success')\\n      } else {\\n        Message.danger('sorry, validate failed')\\n      } \\n    })\\n  }\\n  \\n  render() {\\n    const { people } = this.state.family\\n    return (\\n      <Form type=\\\"inline\\\" model={this.state.family} ref={el => this.formRef = el} labelWidth={90}>\\n        {\\n          people.map((person, index) => (\\n            <Form.Item\\n              className=\\\"col-xs-24\\\"\\n              key={person+index}\\n              label={`家人${index + 1}`}\\n              prop={`people.${index}`}\\n              rules={\\n                { \\n                  type: 'object', \\n                  required: true, \\n                  fields: {\\n                    name: [\\n                      { required: true, message: '姓名不能为空', trigger: 'blur' },\\n                      { type: 'string', min:3, max: 6, message: '姓名必须在3到6个字符', trigger: 'change' }\\n                    ]\\n                  } \\n                }\\n              }\\n            >\\n              <Input \\n                placeholder=\\\"请输入家人姓名\\\" \\n                style={{ width: 300 }}\\n                value={person.name}\\n                onChange={e => {\\n                  people[index].name = e.target.value\\n                  this.setState({\\n                    family: {\\n                      people\\n                    }\\n                  })\\n                }}\\n              />\\n              <Button shape=\\\"circle\\\" style={{ borderColor: 'transparent' }} onClick={this.handleDel.bind(this, index)}>\\n                <Icon type=\\\"minus-round\\\" style={{ fontSize: 20, color: '#909090' }} />\\n              </Button>\\n            </Form.Item>\\n          ))\\n        }\\n        <Form.Item className=\\\"col-xs-24\\\" label={''}>\\n          <Button style={{ width: 300, background: '#e6e6e6'}} onClick={this.handleAdd.bind(this)}>\\n            <Icon type=\\\"add\\\" style={{ marginRight: 12 }} />添加\\n          </Button>\\n        </Form.Item>\\n        <Form.Item className=\\\"col-xs-24\\\" label={''}>\\n          <Button theme=\\\"primary\\\" onClick={this.handleSubmit.bind(this)}>Submit</Button>\\n        </Form.Item>\\n      </Form>\\n    )\\n  }\\n```\\n:::\\n\\n\\n### Form Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| type     | 类型   | string  |   inline/horizontal       |    horizontal    |\\n| model     | 表单数据对象   | object  |   -       |    -    |\\n| rules     | 表单校验规则   | object  |   -       |    -    |\\n| scrollToError     | 提交表单时是否滚动到第一个错误位置   | boolean  |   -       |    false    |\\n\\n### Form Method\\n| 参数       | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| validate  | 表单验证方法   | func  |   -       |    -    |\\n| validateField        | 对表单单项进行验证   | func  |   -       |    -    |\\n| resetField        | 对表单数据model重置   | func  |   -       |    -    |\\n\\n### Form.Item Attributes\\n| 参数      | 说明    | 类型      | 可选值       | 默认值   |\\n|---------- |-------- |---------- |-------------  |-------- |\\n| required    | 是否必填 | boolean  |   -     |   false  |\\n| rules    | 校验规则(优先级高级外部rules) | object/array  |   -     |   -  |\\n| label    | label文案 | string  |   -     |   - |\\n| labelWidth    | label栅格宽度 | string/number  |   -     |   - |\\n| labelPosition    | label对其位置 | left/right  |   -     |   - |\\n\\n\\n\\n\\n\""],"sourceRoot":""}