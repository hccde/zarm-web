{"version":3,"sources":["webpack:///./components/confirm/confirm.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/13.70a83e18.js","sourcesContent":["export default \"## Confirm 确认框\\n\\n用于重要操作的确认提示。\\n\\n### 基本用法\\n\\n弹窗形式，默认有取消和确定两个按钮。\\n\\n::: demo\\n```js\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      visible: false,\\n    };\\n    this.showConfirm = this.showConfirm.bind(this);\\n    this.hideConfirm = this.hideConfirm.bind(this);\\n  }\\n\\n  showConfirm() {\\n    this.setState({\\n      visible: true,\\n    });\\n  }\\n\\n  hideConfirm() {\\n    this.setState({\\n      visible: false,\\n    });\\n  }\\n\\n  render() {\\n    const { visible } = this.state;\\n    return (\\n      <div>\\n        <Button theme=\\\"error\\\" onClick={this.showConfirm}>删除</Button>\\n        <Confirm\\n          visible={visible}\\n          onOk={this.hideConfirm}\\n          onCancel={this.hideConfirm}\\n          message='确认删除吗？'\\n        />\\n      </div>\\n    );\\n  }\\n```\\n:::\\n\\n### 自定义操作按钮\\n\\n自定义操作按钮的文案。\\n\\n::: demo 通过`okText`, `cancelText`属性设置。\\n```js\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      visible: false,\\n    };\\n    this.showConfirm = this.showConfirm.bind(this);\\n    this.hideConfirm = this.hideConfirm.bind(this);\\n  }\\n\\n  showConfirm() {\\n    this.setState({\\n      visible: true,\\n    });\\n  }\\n\\n  hideConfirm() {\\n    this.setState({\\n      visible: false,\\n    });\\n  }\\n\\n  render() {\\n    const { visible } = this.state;\\n    return (\\n      <div>\\n        <Button theme=\\\"info\\\" onClick={this.showConfirm}>自定义操作按钮</Button>\\n        <Confirm\\n          visible={visible}\\n          okText=\\\"继续\\\"\\n          cancelText=\\\"返回\\\"\\n          onOk={this.hideConfirm}\\n          onCancel={this.hideConfirm}\\n          message='继续操作吗？'\\n        />\\n      </div>\\n    );\\n  }\\n```\\n:::\\n\\n###  命令式方式调用\\n\\n根据业务需要添加命令式调用\\n\\n::: demo 通过调用`Confirm.show(object)`来显示Confirm。\\n```js\\n  render() {\\n    return (\\n      <div>\\n        <Button theme=\\\"success\\\" onClick={async ()=>{\\n         let a = await Confirm.show(\\\"hello world\\\");\\n         console.log(a);\\n        }}>命令式调用</Button>\\n      </div>\\n    );\\n  }\\n```\\n:::\\n\\n使用 `Confirm.show(object)`调用时，参数有两种形式。\\n```\\n// 方式1\\nConfirm.show(\\\"message\\\");\\n\\n// 方式2\\nConfirm.show({\\n  message: \\\"message\\\",\\n  onOk: ()=> {}\\n});\\n```\\n\\n在使用的时候也可以使用异步的方式获取点击的按钮。\\n\\n+ 使用回调\\n```\\nConfirm.show({\\n    message: \\\"message\\\",\\n    onOk: ()=> {\\n      doSomething();\\n    }\\n});\\n```\\n+ 使用异步\\n```\\nConfirm.show({\\n    message: \\\"message\\\",\\n}).then(result =>{\\n    if(result) {\\n      doSomething();\\n    }\\n});\\n```\\n+ 使用 `async`\\n```\\nonClick = async ()=> {\\n    if(await Confirm.show(\\\"hello world\\\")){\\n      doSomething();\\n    };\\n}\\n```\\n\\n### Attributes\\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\\n|---------- |-------------- |---------- |--------------------------------  |-------- |\\n| message | 内容文本 | string | — | '' |\\n| width | 弹窗宽度 | number | — | 270 |\\n| okText | 确认按钮文本 | string | — | 确认 |\\n| cancelText | 取消按钮文本 | string | — | 取消 |\\n\\n\\n### Events\\n| 事件名称 | 说明 | 回调参数 |\\n|---------- |-------- |---------- |\\n| onOk | 点击确认触发的事件 | — |\\n| onCancel | 点击取消触发的事件 | — |\\n\""],"sourceRoot":""}