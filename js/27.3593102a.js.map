{"version":3,"sources":["webpack:///./components/notification/notification.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/27.3593102a.js","sourcesContent":["export default \"## Notification 提示框\\n\\n悬浮出现在页面右上角, 适合复杂类型或者系统主动推送的消息通知提示。\\n\\n### 基本用法\\n\\n适用性广泛的通知栏\\n\\n::: demo 设置是否自动关闭\\n```js\\nimport { Notification, Button } from 'dragon-ui';\\n\\nclass Demo extends React.Component {\\n  render() {\\n    return (\\n      <div>\\n        <Button theme=\\\"primary\\\" onClick={this.open.bind(this)}>会自动关闭</Button>\\n        <Button theme=\\\"primary\\\" onClick={this.open2.bind(this)}>不会自动关闭</Button>\\n      </div>\\n    )\\n  }\\n  \\n  open() {\\n    Notification.open({\\n      title: '标题名称',\\n      message: '这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案',\\n    });\\n  }\\n  \\n  open2() {\\n    Notification.open({\\n      title: '提示',\\n      message: '这是一条不会自动关闭的消息',\\n      stayTime: 0,\\n    });\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n:::\\n\\n### 带有图标\\n\\n带有 icon，常用来显示「成功、警告、消息、错误」类的系统消息\\n\\n::: demo Notification 组件有四种通知类型：`success`, `warning`, `info`, `error`。通过`type`字段来设置\\n```js\\nimport { Notification, Button } from 'dragon-ui';\\n\\nclass Demo extends React.Component {\\n  render() {\\n    return (\\n      <div>\\n        <Button onClick={this.open3.bind(this)}>成功</Button>\\n        <Button onClick={this.open4.bind(this)}>警告</Button>\\n        <Button onClick={this.open5.bind(this)}>消息</Button>\\n        <Button onClick={this.open6.bind(this)}>错误</Button>\\n      </div>\\n    )\\n  }\\n  \\n  open3() {\\n    Notification.open({\\n      title: '成功',\\n      message: '这是一条成功的提示消息',\\n      theme: 'success',\\n    });\\n  }\\n  \\n  open4() {\\n    Notification.open({\\n      title: '警告',\\n      message: '这是一条警告的提示消息',\\n      theme: 'warning'\\n    });\\n  }\\n  \\n  open5() {\\n    Notification.primary({\\n      title: '消息',\\n      message: '这是一条消息的提示消息'\\n    });\\n  }\\n  \\n  open6() {\\n    Notification.danger({\\n      title: '错误',\\n      message: '这是一条错误的提示消息'\\n    });\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n:::\\n\\n### 自定义按钮\\n\\n自定义通知栏底部的操作按钮\\n\\n::: demo 通过btn prop传递需要展示在底部的操作按钮, 注意key必须是唯一的, 相同的key通知提醒会被统一关闭!\\n```js\\nimport { Notification, Button } from 'dragon-ui';\\n\\nclass Demo extends React.Component {\\n  render() {\\n    return (\\n      <div>\\n        <Button theme=\\\"primary\\\" onClick={this.open.bind(this)}>自定义按钮1</Button>\\n        <Button theme=\\\"primary\\\" onClick={this.open2.bind(this)}>自定义按钮2</Button>\\n      </div>\\n    )\\n  }\\n  \\n  open() {\\n    const key = `key-${Date.now()}`\\n    const btn = (\\n      <React.Fragment>\\n        <Button size=\\\"sm\\\" onClick={() => Notification.remove(key)}>关闭</Button>\\n        <Button theme=\\\"primary\\\" size=\\\"sm\\\" onClick={() => alert('你点击了确定按钮')}>确定</Button>\\n      </React.Fragment>\\n    )\\n    Notification.open({\\n      title: '这是一段标题',\\n      message: '我是描述内容我是描述内容我是描述内容我是描述内容我是描述内容我是描述内容我是描述内容',\\n      theme: 'success',\\n      stayTime: 0,\\n      btn,\\n      key\\n    });\\n  }\\n  \\n  open2() {\\n    const key = `open${Date.now()}`;\\n    const btn = <Button size=\\\"sm\\\" onClick={() => Notification.remove(key)}>关闭通知</Button>\\n    Notification.open({\\n      title: '提示',\\n      message: '这是一条不会自动关闭的消息',\\n      stayTime: 0,\\n      btn,\\n      key\\n    });\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n:::\\n\\n### 回调函数\\n\\n回调函数\\n\\n::: demo 点击notification的回调函数\\n```js\\nimport { Notification, Button } from 'dragon-ui';\\n\\nclass Demo extends React.Component {\\n  render() {\\n    return (\\n      <div>\\n        <Button theme=\\\"primary\\\" onClick={this.open.bind(this)}>点击我</Button>\\n      </div>\\n    )\\n  }\\n  \\n  open() {\\n    Notification.open({\\n      title: '点击',\\n      message: '这是一条成功的提示消息',\\n      theme: 'success',\\n      onClick () {alert('点击回调函数')},\\n      onClose () { alert('关闭回调函数') }\\n    });\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n:::\\n\\n<br/>\\n\\n### Api:\\n<p>Notification.open(props: NotificationProps)</p>\\n<p>Notification.success()</p>\\n<p>Notification.primary()</p>\\n<p>Notification.danger()</p>\\n<p>Notification.warning()</p>\\n<p>Notification.remove(key: string)</p>\\n\\n### 参数\\n| 参数      | 说明          | 类型      | 可选值                           | 默认值  |\\n|---------- |-------------- |---------- |--------------------------------  |-------- |\\n| title | 标题 | string | — | — |\\n| key   | 通知的唯一性标识 | string | — | — |\\n| message | 说明文字 | string/ReactElement | — | — |\\n| className | 自定义类名 | string | - | - |\\n| theme | 图标主题，只能为列举的四种之一，否则无效(默认default) | string | success/warning/primary/danger | — |\\n| stayTime | 显示时间, 毫秒。设为 0 则不会自动关闭 | number | — | 4500 |\\n| onClick | 点击 Notification 时的回调函数 | (event) => void | — | — |\\n| onClose | 关闭 Notification 时的回调函数 | (event) => void | — | — |\\n\\n\\n\\n\""],"sourceRoot":""}